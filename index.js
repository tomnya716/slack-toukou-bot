require('dotenv').config();
const { App, ExpressReceiver } = require('@slack/bolt');

// ‚úÖ 1. ExpressReceiver„Åß /slack/events „ÇíÂèó„Åë‰ªò„Åë„Çã
const receiver = new ExpressReceiver({
  signingSecret: process.env.SLACK_SIGNING_SECRET,
  endpoints: '/slack/events', // Slack„Å´Ë®≠ÂÆö„Åô„ÇãURL„Å®‰∏ÄËá¥ÔºÅ
});

// ‚úÖ 2. Bolt App „Çí receiver ÁµåÁî±„ÅßÂàùÊúüÂåñ
const app = new App({
  token: process.env.SLACK_BOT_TOKEN,
  receiver,
});

const TRIGGER_REACTION = 'ÊäïÁ®ø';
const SOURCE_CHANNEL = process.env.SOURCE_CHANNEL_ID;
const TARGET_CHANNEL = process.env.TARGET_CHANNEL_ID;

// ‚úÖ 3. reaction_added „Ç§„Éô„É≥„Éà„ÇíÂá¶ÁêÜ
app.event('reaction_added', async ({ event, client }) => {
  if (event.reaction === TRIGGER_REACTION && event.item.channel === SOURCE_CHANNEL) {
    const result = await client.conversations.history({
      channel: event.item.channel,
      latest: event.item.ts,
      inclusive: true,
      limit: 1
    });

    const original = result.messages[0];

    await client.chat.postMessage({
      channel: TARGET_CHANNEL,
      text: `<!channel> üëª „Ç¢„Éä„Ç¶„É≥„Çπ:\n>${original.text}`,
      username: "ÂåøÂêç„Åè„Çì",
      icon_emoji: ":ghost:",
    });
  }
});

// ‚úÖ 4. „Çµ„Éº„Éê„ÉºËµ∑ÂãïÔºàRender„Åå„Åì„Åì„ÇíÂëº„Å≥Âá∫„ÅôÔºâ
(async () => {
  await app.start(process.env.PORT || 3000);
  console.log('‚ö°Ô∏è Slack bot is running on port 3000');
})();
